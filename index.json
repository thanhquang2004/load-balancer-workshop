[
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon Load Balancer and EC2 Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon Load Balancer and EC2. Practice creating Load Balancer and configuring it to ensure that EC2 instances in the VPC are accessible from the internet.\nContent Introduction Preparation Create Target Group, Register EC2 instances to Target Group Create Load Balancer Clean up resources "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Lab VPC Go to VPC service management console Click Your VPC. Click Create VPC. At the Create VPC page. In the Name tag field, enter Lab VPC. In the IPv4 CIDR field, enter: 10.10.0.0/16. Click Create VPC. "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Load Balancer is a device or software used to distribute network or application traffic evenly across multiple servers or other resources. The main goal of a load balancer is to ensure that no single server is overwhelmed, thereby improving the performance, reliability, and scalability of the system.\nElastic Load Balancing is an AWS Load Balancing service that ensures requests are balanced between targets.\nKey features include:\nHigh Availability Scalability: theoretically unlimited High Security: When combined with other services like WAF, Security Group. ELB can easily integrate with various backends using EC2, Container, Lambda. Basic components of Load Balancer\nTarget Group: A group of servers managed by the load balancer to distribute traffic. Listener: Defines how the load balancer receives incoming traffic and routes it to target groups. Rule: Defines how the load balancer routes traffic to target groups. Health Check: Checks the status of servers in the target group. How does Load Balancer work?\nBy default, the Load Balancer distributes requests from clients to targets in a Target Group in a balanced manner (round robin), even if the target is in more than one target group.\nExample: In the above image, each instance will receive ~16.7% of the requests from clients.\nThe Load Balancer can route to more than one target. In the case of multi-target, the routing to a target is determined by several rules:\nListener port (the port requested by the user will be routed to the corresponding target group) Path pattern (Application LB only) Fixed ratio. For example, Target Group 01 receives 20%, Target Group 02 receives 80% of the traffic (in scenarios where we want to release a new feature to 20% of users to gather feedback). "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/2-prerequiste/2.1-createec2/",
	"title": "Prepare VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we need to create a VPC with 2 public subnets. Then create 2 Linux EC2 Instances within the public subnets.\nThe overview of the architecture after you complete this step will be as follows:\nTo learn how to create EC2 instances and VPC with public/private subnets, you can refer to these labs:\nIntroduction to Amazon EC2 Working with Amazon VPC Content Create VPC Create Public subnet Create Private subnet Create security group Create public Linux server Create private Windows server "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/2-prerequiste/2.2-createtg/",
	"title": "Create Target Group",
	"tags": [],
	"description": "",
	"content": "Create Target Group In this step, we will create a Target Group.\nAccess the target group management interface\nIn the left navigation pane, click Target Groups.\nClick Create Target Group.\nSelect Target type as Instances.\nName the Target Group. Select port 80 as specified in the security group. Select IPv4 Leave VPC and Health check as default. You can customize the settings to determine if the instance is healthy or unhealthy. Click Next Select the instances to add to the target group. Click Include as pending below The instances will be moved to Review targets Click Create target group "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": " You need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/3-loadbalancer/",
	"title": "Creating a Load Balancer Connection",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a Load Balancer.\nAccess the Load Balancer management interface\nClick Load Balancer Click Create Load Balancer\nClick Application Load Balancer Name the Load Balancer\nLeave Scheme and Load balancer IP address type as default Select the appropriate AZ, theoretically, it is best to select all AZs for optimization. Click to select the appropriate Security group\nIn Listeners and routing, select the Target group created in 2.2 Click Create load balancer Wait about 3-5 minutes for the Load Balancer status to change to Active After it changes to Active, click on the DNS name to access the website. When reloading the website, you will see the switch between IPs and Instance names at a 50% rate.\n"
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/2-prerequiste/2.1-createec2/2.1.2-createsecgroup/",
	"title": "Create security groups",
	"tags": [],
	"description": "",
	"content": "Create security groups In this step, we will proceed to create the security groups used for our instances. As you can see, these security groups will not need to open traditional ports to ssh like port 22 or remote desktop through port 3389.\nCreate security group for Linux instance located in public subnet Go to VPC service management console Click Security Group. Click Create security group. In the Security group name field, enter SG Public Linux Instance. In the Description section, enter SG Public Linux Instance. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Keep Outbound rule, drag the mouse to the bottom. Click Create security group. As you can see, the security group we created to use for Linux public instances will not need to open traditional ports to ssh like port 22.\nCreate a security group for a Windows instance located in a private subnet After successfully creating a security group for the Linux instance located in the public subnet, click the Security Groups link to return to the Security groups list. Click Create security group.\nIn the Security group name field, enter SG Private Windows Instance.\nIn the Description section, enter SG Private Windows Instance. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Scroll down. Add Outbound rule to allow TCP 443 connection to 10.10.0.0/16 ( CIDR of Lab VPC we created) Click Create security group. For the Instance in the private subnet, we will connect to the Session Manager endpoint over a TLS encrypted connection, so we need to allow outbound connection from our instance to VPC CIDR through port 443.\nCreate security group for VPC Endpoint In this step, we will create security group for VPC Endpoint of Session Manager. After successfully creating the security group for the Windows instance in the private subnet, click the Security Groups link to return to the Security groups list. Click Create security group. In the Security group name field, enter SG VPC Endpoint. In the Description section, enter SG VPC Endpoint. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Scroll down. Delete Outbound rule. Add Inbound rule allowing TCP 443 to come from 10.10.0.0/16 ( CIDR of Lab VPC we created ). Click Create security group. So we are done creating the necessary security groups for EC2 instances and VPC Endpoints.\n"
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/2-prerequiste/2.1-createec2/2.1.3-createec2linux/",
	"title": "Create Public Linux EC2",
	"tags": [],
	"description": "",
	"content": " Access the EC2 service management console Click Instances. Click Launch instances. Name the instance On the Choose an Instance Type page. Click to select an appropriate AMI. Click to select an appropriate configuration. On the Configure Instance Details page For Instance Type, select t2.micro. For Key pair name, select an existing key pair or create a new one. Select Configure Security Group. Under Network, choose the Security Group created in 2.1.2. On the Configure Storage page. You can increase or decrease the instance\u0026rsquo;s disk capacity as needed. Click on Advanced details to expand. In User data In the User data section, enter the following script: #!/bin/bash yum install -y httpd service httpd start chconfig httpd on cd /var/www/html echo \u0026#34;\u0026lt;html\u0026gt;\u0026#34; \u0026gt; index.html echo \u0026#34;\u0026lt;h1\u0026gt;Instance A\u0026lt;/h1\u0026gt;\u0026#34; \u0026gt;\u0026gt; index.html export TOKEN=`curl -X PUT \u0026#34;http://169.254.169.254/latest/api/token\u0026#34; -H \u0026#34;X-aws-ec2-metadata-token-ttl-seconds: 21600\u0026#34;` echo \u0026#34;\u0026lt;br\u0026gt;Private IP: \u0026#34; \u0026gt;\u0026gt; index.html curl -H \u0026#34;X-aws-ec2-metadata-token: $TOKEN\u0026#34; -v http://169.254.169.254/latest/meta-data/local-ipv4 \u0026gt;\u0026gt; index.html echo \u0026#34;\u0026lt;br\u0026gt;Public IP: \u0026#34; \u0026gt;\u0026gt; index.html curl -H \u0026#34;X-aws-ec2-metadata-token: $TOKEN\u0026#34; -v http://169.254.169.254/latest/meta-data/public-ipv4 \u0026gt;\u0026gt; index.html echo \u0026#34;\u0026lt;/html\u0026gt;\u0026#34; \u0026gt;\u0026gt; index.html Click Launch instance. Create an additional instance server2 similar to the above. "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/4-cleanup/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "We will follow these steps to delete the resources we created in this exercise.\nDelete EC2 instance Access the EC2 management console Click Instances. Select both Public Linux Instance and Private Windows Instance. Click Instance state. Click Terminate instance, then click Terminate to confirm. Delete Load Balancer Access the Load balancers interface Select the Load Balancer you want to delete. Click Actions. Click Delete load balancer. Type Confirm and click Confirm. Delete Target Group Select the Target Group you want to delete. Click Actions. Click Delete. Click Yes, delete. Delete VPC Access the VPC management console Click Your VPCs. Select Lab VPC. Click Actions. Click Delete VPC. In the confirm box, type delete to confirm, then click Delete to delete Lab VPC and related resources. "
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thanhquang2004.github.io/load-balancer-workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]